##############################################################################
# Licensed Materials - Property of IBM
# 5724-O03
# Copyright IBM Corp. 2006, 2010
#
# NOTE: To change property values contained in this file, do not modify this
# file directly: IBM may, without warning, overwrite your changes during
# an install or upgrade.  Instead, please use an override.properties file
# that serves as a central location for modifications to Factory properties.
#
# Making a property entry in an override.properties file with your custom
# value will override the default value for that property at runtime.  If you
# upgrade the project and get a new instance of any of the Factory-supplied
# properties files your override.properties file will remain untouched.
#
# There are two different places to put your overrides, depending on whether
# or not you want the changes to affect the Factory running on the server or
# if you just want to affect the Designer experience.
#
# To affect the Factory running on the server, put your overrides inside the
# project that you want to modify, in the file
# WebContent\WEB-INF\config\override.properties
# (You may have to create this file.)
#
# To affect just the Designer experience (for all projects), you can put the
# override.properties file anywhere (outside a project), and you need to set
# the location in the Windows/Preferences page for the Factory.
#
# The same override.properties file should be used to override properties in
# any of the following properties files.
#
#   bowstreet.properties
#   cluster.properties
#   logging.properties
#   server.properties
#
##############################################################################

# Subdirectory where packaging files are stored.
bowstreet.location.packaging=${bowstreet.rootDirectory}/packaging

#Alias to use for packaging urls.  This must match an entry in the alias.xml file
bowstreet.settings.packagingAlias=packaging

# User Data storage handler
bowstreet.settings.userDataStorageHandler=com.bowstreet.datastorage.UserFileDataStorageHandler

# Subdirectory where user data files are stored.
bowstreet.location.userData=${bowstreet.rootDirectory}/userdata

# RELATIVE subdirectory where user JAR files are stored.
bowstreet.location.userlib=${bowstreet.rootDirectory}/lib


# This selects the Java class to use for the BuilderManager.  It must extend the
# abstract class        com.bowstreet.generation.BuilderManager
# Default value is      com.bowstreet.generation.implementation.XmlBuilderManager
# Development value is  com.bowstreet.generation.implementation.ReloadingXmlBuilderManager
# The development value is recommended on any system on which you are creating Builders, but
# is NOT recommended for a deployed system for performance reasons.
bowstreet.settings.buildermanagerclass=com.bowstreet.generation.implementation.ReloadingXmlBuilderManager

# These are all the Argument types (inside a BuilderInputDef <editor> node) that should be
# translated through the BuilderDef resource file.
bowstreet.settings.builderInputArguments.translated.1=listlabels
bowstreet.settings.builderInputArguments.translated.2=headings
bowstreet.settings.builderInputArguments.translated.3=label
bowstreet.settings.builderInputArguments.translated.4=title
bowstreet.settings.builderInputArguments.translated.5=prompt

# These are all Argument types (inside a BuilderInputDef <editor> node) that trigger
# editor recursion.  This argument could have a single child which is <Editor> or
# it could have a single child (name unimportant) which has multiple children which are <Editor>
bowstreet.settings.builderInputArguments.editorRecursionSignal.1=cellEditors
bowstreet.settings.builderInputArguments.editorRecursionSignal.2=inputEditors
bowstreet.settings.builderInputArguments.editorRecursionSignal.3=editor

# The default domain handler class which will be used if there is not one defined by the project
bowstreet.settings.defaultdomainhandlerclass=com.bowstreet.builders.webapp.foundation.WebAppDomanHandler

## Set this to start refusing connections from the server when the
#  Memory usage gets too high
# original: RequestMemThreshold
#bowstreet.settings.RequestMemThreshold=

## Size of template cache (how many templates and runtime models in cache)
## Use zero to disable caching
bowstreet.cache.model.size=2000

bowstreet.cache.model.timeOutMinutes=10080

# How often to check for updates to BuilderInfo
bowstreet.cache.builderInfoCheckInterval=30

# How often to try to reload BuilderRegen classes
bowstreet.cache.builderRegenLoadInterval=30

# Default error page (JSP) for unhandled exceptions.
bowstreet.webapp.errorHandler=/factory/webapp/defaulterror.jsp

# Default page (JSP) displayed if no output is produced during a request
bowstreet.webapp.missingOutputHandler=/factory/webapp/nulloutput.jsp

# This property selects the handler used to obscure sensitive strings in the Factory.
bowstreet.settings.stringObscureHandler=com.bowstreet.util.SimpleObscureHandler

# WebAppData handler, which is used for storing global session data for a user
bowstreet.webapp.webAppDataStorageHandler=com.bowstreet.webapp.engine.SessionDataStorage

# Default UserInfoHandler for WebApp
bowstreet.webapp.UserInfoHandler=com.bowstreet.webapp.util.WebAppUserInfoHandler

# log4j policy file, it can be a property file, xml file.
# if the value ends with .xml, it is treated as a xml file, otherwise it is treated as property file
# the value can also be a web URL
  bowstreet.logging.log4j.configFile=${bowstreet.rootDirectory}/config/log4j.properties
# bowstreet.logging.log4j.configFile=http://server:port/bowstreet/log4j.properties
# bowstreet.logging.log4j.configFile=${bowstreet.rootDirectory}/config/log4j.xml

#
bowstreet.builders.ConfigBuilder.watchInterval=1000

# The following will be prefixed on to the resource bundle name of the resources automatically
# created by the Data Services User Interface builder.
bowstreet.builders.dsui.resourceNamePrefix=

# the interval to check if the policy file is changed.
bowstreet.logging.log4j.watchInterval=1000

# This property sets the Root Directory where Models will be stored.
bowstreet.location.models.path=${bowstreet.rootDirectory}/models

# Directory where user XMLSchema and SOAP Encoding schemas are stored.
bowstreet.location.schemas=${bowstreet.rootDirectory}/../factory/xml/schemas

# This property will disable regen-time checking for conflicting/duplicate target namespaces in schemas in a webapp, whether
# added explicitly with the Schema builder or implicitly from a ServiceCall.
# bowstreet.schema.disableDuplicateNamespaceCheck=true

# Proxy settings for SOAP requests. If set, (and uncommented) these properties take effect in SOAP requests to drive the proxyHost, proxyPort, etc. If the
# System (http.proxyHost, http.proxyPort, etc) settings are set then they take effect and these properties are ignored.
# bowstreet.soap.proxyHost=
# bowstreet.soap.proxyPort=
# bowstreet.soap.proxyUser=
# bowstreet.soap.proxyPassword=

#Defines a limit as to how many levels of recursion will be attempted when parsing a schema and defining the
#element and type paths
bowstreet.xml.schema.recursions=50
bowstreet.xml.schema.nodes=10000

# Typically want to have both of these values uncommented and set to true for production. For development, more common to
# have deployModelInfo false or commented out. See WebServiceEnable builder doc.
bowstreet.axis.inbound.checkConfigBeforeModels=true
bowstreet.axis.inbound.deployModelInfo=false

# This property sets the Information Level loading models
# integer value with the following meanings.  Default value is 0.
# 0: Show no info during the reading in of Models
# 1: Show only error messages for improper Models
# 2: Show names of directories when searching for Models plus IDs of all BuilderDefs found.  (plus above)
# 3: Show complete Models.  (plus above)
bowstreet.location.models.dumpInfoLevel=1

# This property determines the Factory server type (development/deployment)
bowstreet.server.type=development

# This property sets the java class name which extends com.bowstrret.factory.model.SourceModelManager
# defaults to com.bowstreet.factory.model.implementation.FileModelManager
bowstreet.settings.sourcemodelmanager.implementationclass=com.bowstreet.factory.model.implementation.FileModelManager

# class name for the External Model Properties Storage implementation class
# defaults to com.bowstreet.factory.model.implementation.XmlExternalModelPropertiesStorage
bowstreet.settings.sourcemodelmanager.externalmodelpropertiesclass=com.bowstreet.factory.model.implementation.XmlExternalModelPropertiesStorage

# Comma separated list of class names, each of which implement com.bowstreet.factory.model.ModelProcessor
# default is com.bowstreet.factory.model.implementation.StandardModelProcessor
bowstreet.settings.sourcemodelmanager.modelprocessors=com.bowstreet.factory.model.implementation.StandardModelProcessor

# Minimum number of milliseconds before we will reprocess models.  Default is 60000 (one minute)
bowstreet.settings.sourcemodelmanager.modelprocessinginterval=60000


# This property set if the automation engine run in the webapp mode, please don't change its value
bowstreet.isWebApp=true

# use this to disable all output caching
bowstreet.cache.output.disable=false


# Path for classes to be loaded by the dynamic class loader. The dynamic class loader is used to load classes such as Linked Java Object's, Builder regen classes, Builder coordinator classes, and others.
# If the bowstreet.dynamic.class.load.checkTimestamp property is set to "true" and the class changes it will be dynamically reloaded on the next instance creation providing it's on the loader class path and it's one of the supported classes to be dynamically loaded.
# Note - Dynamically loaded classes cannot be on Java classpath and be dynamically loaded.
bowstreet.dynamic.class.load.path=${bowstreet.rootDirectory}/work/classes,${bowstreet.rootDirectory}/work/lib

# Enables the time check for classes being loaded by the dynamic class loader. If true the class loader will check the class time stamp for each class instance creation, if false it will only be loaded once.
# Typically for performance reasons this is set to true in a development environment and false in production.
bowstreet.dynamic.class.load.checkTimestamp=true

# Normally the IBM class loader defers to the host classloader
# (WEB-INF/classes, WEB-INF/lib and up the class loader chain) before
# examining work/classes and work/lib to find and load a class. This
# property directs the IBM classloader, in the case of the
# specified packages, to examine work/classes / work/lib for the class
# before deferring to the host classloader.
bowstreet.classloader.prefer_dynamic_packages=lotus.,com.ibm.sslight.,org.omg.CORBA.,javax.xml.transform.,net.sf.hibernate.


# Determine whether to validate namespace prefix to NS URI mapping
# while parsing XML with the Factory parser.
bowstreet.xml.parser.validateNamespacePrefixes=true

#Set the location where memory combo widget data is kept
bowstreet.location.memorywidget.path=${bowstreet.rootDirectory}/factory/memory_widget_data

# A single RDD file that will be used by default by all PageAutomation pages
# The first one that is found will be used.
#bowstreet.baseRddFile=/WEB-INF/factory/data_definitions/dojo_base_datadef.xml;/WEB-INF/factory/data_definitions/base_datadef.xml

# Set the format string for the data value of dates
bowstreet.pageautomation.date.data=

# Set the format string for the display of dates
bowstreet.pageautomation.date.display=

# Set the format string for the data value of a datetime
bowstreet.pageautomation.dateTime.data=

# Set the format string for the display of a datetime
bowstreet.pageautomation.dateTime.display=

# Set the format string for the data value of times
bowstreet.pageautomation.time.data=

# Set the format string for the display of times
bowstreet.pageautomation.time.display=

# Set to true if you always want to show PageAutomation Info
# false or blank would mean it is shown only if you have "Show Hidden Objects" turned on
bowstreet.pageautomation.alwaysshowinfo=false

# If this has a value, then all dates parsed by the PageAutomation date parser
# which are less than this value will have 2000 added to them.  Plus, if they
# are greater than this value but less than 100 they will have 1900 added to them
# If your application deals with early Christian studies, so you need to be able
# to enter the year 0035, then just comment this line out.
bowstreet.pageautomation.date.yearAdjustCutoff=50

# Block the behavior where a repeated Leaf becomes a comma-separated list
bowstreet.pageautomation.force_separate_leaf_when_repeated=true

# Schema analysis now does a pretty good job detecting recursions, though
# it won't realize it until the element is being analyzed the third time.  At
# that point, it will see that the second and first are identical (with identical
# children) and it will stop.  This counts as one full recursion.  If you want it
# to recurse more, increase this value.
bowstreet.pageautomation.recursions_allowed=1

# If you want to special case a particular named element, you can append dot and the
# name of the element, so that element can recurse more than the default value above
bowstreet.pageautomation.recursions_allowed.Outline=2

# This is used for any Data Page builder where the HTML Template field is left blank.
# INCLUDING those invoked by other builders through the API or through any technique.
# Use of this field will likely affect many existing DP builders in your existing models!
# bowstreet.datapage.defaulttemplate=

# This is used only as the default value inserted in NEW Data Page Builders that you might
# create.  This will not affect any existing Data Page Builders.
# Note that if the previous setting has a value, then this one will not be used because
# it will be assumed that you want to be able to change all your models after the fact.
bowstreet.datapage.initialTemplateSelection=/factory/html_templates/gridtable.html

# Define the class that will be used to strip JSP fragments out of generated HTML
# pages.  If no value is given or the property is undefined, then no stripping will
# be performed.  Note: the class must be a subclass of java.io.Writer and have a
# constructor that takes a java.io.Writer as the single argument.  If any erors are
# encountered while creating an instance of this class an error will be sent to the
# Event log and to the Task list of the Designer, but HTML generation will be
# performed.
bowstreet.datapage.defaultjspfilterclass=com.bowstreet.builders.webapp.pageautomation.JSPFilterWriter

# Should the "Heading" column of the Children Info Table in new Data Column Modifiers (or new
# rows in old DCM's) be initialized to [Do Not Change] or preserve the old style.
bowstreet.dataColumnModifier.initializeHeadingToDoNotChange=true

# Add additional timezone translators in this format
bowstreet.timezone.translate.YDT=AKDT
# This means that a timezone code of YDT (which would otherwise not be recognized) will
# be translated to be AKDT, which is recognized as GMT-8:00

# Configurable credential storage handler (used by solutions credential builder)
bowstreet.security.handlers.credentialStorage=com.bowstreet.methods.adapters.credentials.CredentialVaultBase

# Configure whether DataPage and Page Automation will attempt to encode html tags found in text values
# Default to true, to protect against someone trying to insert <script> into a text value.
# Note, for security reasons, it is not recommended that this value be changed to false.
bowstreet.security.escapeOutputText=true

#### Diagnostic Tracing Properties ####
# General
# Set this to true to turn on diagnostic tracing
bowstreet.diagnostic.trace.enabled=false
# Advanced: classes implementing com.bowstreet.webapp.util.DiagnosticTraceListener can be added here (comma-separated)
bowstreet.diagnostic.trace.listeners=com.bowstreet.webapp.util.SessionSizeDiagnosticTraceListener

# Session Size Tracing (see log4j.properties for output options for this facility)
# Number of seconds to wait between writing session size trace output
#bowstreet.diagnostic.trace.sessionSize.interval=60
# Only show session size tracing for this user - if null, trace all users (normally not desirable)
#bowstreet.diagnostic.trace.sessionSize.userName=

# This can be set to true to include ReadOnly and Request variables in the output
bowstreet.diagnostic.trace.sessionSize.includeNonSessionVariables=false

# This can be set to true to include empty variables in the output
bowstreet.diagnostic.trace.sessionSize.includeEmptyVariables=false

#Set ServiceDefinintion Builder to generate expanded operation names
#in the generated wsdl. Example:  callOperationNameExecute if set to true
#if set to false the operation names will just be Example: OperationName with out the prefix
#call and the suffix Execute.
bowstreet.definition.expand.opname=false


# style string for the "Available element" entries in the design view
#bowstreet.designview.availelementstyle=color:yellow;background-color:black;font:12pt Arial;font-weight:bold
bowstreet.designview.availelementstyle=color:885b51;background-color:#ffe095;font:8pt Arial;font-weight:bold

# when using dynacache with discardable Variable, the timeout value in seconds
bowstreet.discardableVariable.dynacacheTimeToLive=1800
# the default cache size for DiscardableVariable if none is specified
bowstreet.discardableVariable.defaultCacheSize=200
# to override the VariableCache implementation class:
# bowstreet.discardableVariable.cacheImplementationClass=com.bowstreet.builders.webapp.methods.DynaVariableCache

## This will add the extra choices to the GenElementContextMenu for pages
bowstreet.genelement.contextmenutool.Page=com.bowstreet.designer.eclipse.editors.PageGenElementContextMenuTool
bowstreet.genelement.contextmenutool.Table=com.bowstreet.designer.eclipse.editors.PageGenElementContextMenuExport
bowstreet.genelement.contextmenutool.Group=com.bowstreet.designer.eclipse.editors.PageGenElementContextMenuExport
bowstreet.genelement.contextmenutool.Field=com.bowstreet.designer.eclipse.editors.PageGenElementContextMenuExport

# Comma separated list of relational database system table schemas that the SQL Call builder's
# Database Explorer will ignore
bowstreet.sql.ignoredSysTableSchemas=SYS,SYSIBM,SYSTOOLS,SYSTEM,SYSCAT,SYSSTAT,MDSYS,TSMSYS,DMSYS,CTXSYS,OLAPSYS,ORDSYS,WMSYS

# Limit database entity search hits to the following value.  Will limit the number of tables
# and stored procedures returned in SQL Call's Database Explorer and the database wizards. If
# the property is commented out (not recommended), then there is no limit, but Designer may
# appear to stall as potentially thousands of entity names are retrieved and processed.
bowstreet.sql.entitySearchLimit=100

# Comma separated list of datasource names that the SQL builders will ignore when asked to fetch
# a list of the datasouces supported by the app server.
bowstreet.sql.ignoredDataSouces=jdbc/wpdbDS

# This is a class which implements com.bowstreet.builders.webapp.pageautomation.LabelConstructor
# It will be used to translate from a name that comes from a database to a displayable name.
# The default one makes these changes:
# FIELD_FROM_DATABASE ==> Field From Database
# FieldFromService ==> Field From Service
bowstreet.pageautomation.defaultLabelConstructor=com.bowstreet.builders.webapp.pageautomation.StandardLabelConstructor

# This is a set of automatic translations that will be performed by the StandardLabelConstructor
# The suffixes must match exactly to each other.  Making the suffix the same as the word is
# just for convenience.  Translating a word to itself means that the word will still be
# picked out of a longer word.  So LASTNAME ==> Last Name because 'name' is in this list.
bowstreet.pageautomation.knownwordkey.no=no
bowstreet.pageautomation.knownwordlbl.no=number
bowstreet.pageautomation.knownwordkey.dept=dept
bowstreet.pageautomation.knownwordlbl.dept=department
bowstreet.pageautomation.knownwordkey.name=name
bowstreet.pageautomation.knownwordlbl.name=name
bowstreet.pageautomation.knownwordkey.date=date
bowstreet.pageautomation.knownwordlbl.date=date
bowstreet.pageautomation.knownwordkey.mgr=mgr
bowstreet.pageautomation.knownwordlbl.mgr=manager
bowstreet.pageautomation.knownwordkey.emp=emp
bowstreet.pageautomation.knownwordlbl.emp=employee

# This is a class that implements the com.bowstreet.builders.webapp.pageautomation.content.ContentFilter interface.
# The class is used at runtime by the StandardFormatter to process a Format Expression for ContentFilterFormat type, and Translate Expression for ContentFilterTranslate type.
# if this class is not specified then ContentFilterFormat and ContentFilterTranslate types will be ignored.
bowstreet.contentFilter.class=com.bowstreet.builders.webapp.pageautomation.content.HtmlElementFilter
# This is the configuration file used by the HtmlElementFilter implementation class which is used to control allowed content.
# The file location is relative to the project's WEB-INF directory.
bowstreet.htmlElementFilter.configFile=/config/html_content_filter.xml

# These properties control the minimum and maximum records that should be retrieved as sample data during service stub generation.
# The default value for the maximum is -1 indicating no limit.
bowstreet.serviceStub.minimumRecords=100
bowstreet.serviceStub.maximumRecords=-1

# Should PageAutomation add all the aria landmarks it knows to add?
# Even if this is false, it will add required and invalid.
bowstreet.pageautomation.add_aria_landmarks=true

# Should client-side (browser) form validation be enabled?
# HTML5 introduces client-side form validation based on <form> and <input> attributes.
# This client-side validation happens before form submission, and if errors are found the form is not submitted.
# This validation can result in a more robust user experience, especially for mobile devices.
# Support for this feature is inconsistent across different browsers and browser versions.
bowstreet.pageautomation.enable_client_form_validation=false

# Accessibility Builder
# Add additional NodeTesters on addtional lines by incrementing the number and specifying the classname 
# These must implement com.bowstreet.builders.webapp.methods.AccessibilityTool.AccessibilityNodeTester
com.bowstreet.Accessibility.NodeTester.1=com.bowstreet.builders.webapp.methods.LinksHaveContent

# Add PageTesters the same way
# These must implement com.bowstreet.builders.webapp.methods.AccessibilityTool.AccessibilityPageTester
com.bowstreet.Accessibility.PageTester.1=com.bowstreet.builders.webapp.methods.HTMLTagHasLangAttr

# These flags can be used to turn off the built-in tests in the 
# Accessibility tool.  They all default to true.
com.bowstreet.Accessibility.TestDuplicateIDs=true
com.bowstreet.Accessibility.TestImageAlt=true
com.bowstreet.Accessibility.TestPageTitle=true
com.bowstreet.Accessibility.TestFrameTitle=true
com.bowstreet.Accessibility.TestIFrameTitle=true
com.bowstreet.Accessibility.TestTableTags=true
com.bowstreet.Accessibility.InputsHaveLabels=true

# Set this to true if you want the Accessibility Assistant builder, when it 
# finds problems, to flag them as Errors in the model.  If false (or not there)
# they will only be warnings.
com.bowstreet.Accessibility.ProblemsAreErrors=false

# This doctype declaration will be added to every JSP, surrounded by guards 
# that prevent it from being inserted in the middle of the page (such as when
# running inside Portal, or for an inserted page).
bowstreet.JSPPageProcessor.doctype=<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

# Should images uploaded by the Camera builder be validated?
# NOTE: This is used by the Camera (Feature Pack for 8.0) builder. It may be removed or replaced in a future release.
bowstreet.fp80.camera.validate.images=true

# Class (implements "com.bowstreet.builders.webapp.fp80.UploadedFileValidator") which is used to validate image files.
# NOTE: This is used by the Camera (Feature Pack for 8.0) builder. It may be removed or replaced in a future release.
bowstreet.fp80.camera.validate.images.class= com.bowstreet.builders.webapp.fp80.ImageValidator
bowstreet.settings.installID=369687852117
