##############################################################################
# Licensed Materials - Property of IBM
# 5724-O03
# Copyright IBM Corp. 2006, 2010
#
# NOTE: To change property values contained in this file, do not modify this
# file directly: IBM may, without warning, overwrite your changes during
# an install or upgrade.  Instead, please use an override.properties file
# that serves as a central location for modifications to Factory properties.
#
# Making a property entry in an override.properties file with your custom
# value will override the default value for that property at runtime.  If you
# upgrade the project and get a new instance of any of the Factory-supplied
# properties files your override.properties file will remain untouched.
#
# There are two different places to put your overrides, depending on whether
# or not you want the changes to affect the Factory running on the server or
# if you just want to affect the Designer experience.
#
# To affect the Factory running on the server, put your overrides inside the
# project that you want to modify, in the file
# WebContent\WEB-INF\config\override.properties
# (You may have to create this file.)
#
# To affect just the Designer experience (for all projects), you can put the
# override.properties file anywhere (outside a project), and you need to set
# the location in the Windows/Preferences page for the Factory.
#
# The same override.properties file should be used to override properties in
# any of the following properties files.
#
#   bowstreet.properties
#   cluster.properties
#   logging.properties
#   server.properties
#
##############################################################################

server.domain=bowstreet.com

# [ bowstreet.cluster ]
#
# This file contains properties that are shared across all
# servers in a cluster.  All of these properties should be
# the same on all of the servers in a cluster.

#
# original: UNIQUEIDPREFIX=com.bowstreet.
bowstreet.engine.uniqueIDPrefix=com.ibm.

# [ bowstreet.settings ]

#Alias to use for packaging urls.  This must match an entry in the alias.xml file
# original: PACKAGING_ALIAS=packaging
bowstreet.settings.packagingAlias=packaging

# User Data storage handler
# original: UserDataStorageHandler=com.bowstreet.datastorage.UserFileDataStorageHandler
bowstreet.settings.userDataStorageHandler=com.bowstreet.datastorage.UserFileDataStorageHandler

# Default SAX parser class
bowstreet.xml.sax.defaultParser=org.apache.crimson.parser.XMLReaderImpl

# Default XML Entity Resolver
# Resolve to null/empty entity resolving by default,
# to prevent malicious external entity references
bowstreet.xml.sax.defaultEntityResolver=com.bowstreet.xml.core.NullEntityResolver

# Handler to retrieve list of known roles for WebApp based tools
# (eg, list of roles from J2EE Deployment Descriptor)
bowstreet.security.KnownRolesHandler=com.bowstreet.webapp.security.J2EEKnownRolesHandler


# [ bowstreet.upload ]

# File Upload Settings
# This determines whether file upload is active for this server.
bowstreet.upload.enabled=false

# This sets the directory where uploaded files will be stored upon successful upload.
bowstreet.upload.destinationPath=${bowstreet.rootDirectory}/upload

# This determines the maximum file size that can be uploaded at one time in KiloBytes.
bowstreet.upload.maxFileSizeK=500

# Session semaphore timeout (in seconds).
bowstreet.session.semaphore.timeOut=45

# This is the handler for storing and retrieving profile set data in
# a file using the standard file handler architecture.  The directory
# property specifies where the profile set files are located for reading
# and writing.
bowstreet.profiles.storage.handler=com.bowstreet.profiles.FileStorageHandler
bowstreet.profiles.storage.file.dir=${bowstreet.rootDirectory}/profiles
bowstreet.profiles.storage.file.enableLocking=true
bowstreet.profiles.storage.file.maxLockTries=5

# This property specifies the amount of time(in seconds) to wait before refresh check for ProfileSet Model Regen Cache.
bowstreet.profiles.cache.waitTime=1

# This property specifies the handler to use for a factory wide default profile selection handler.
# The name specified must be a valid profile slection handler. Handlers are defined in J2EERoot\WEB-INF\config\selection_handlers directory.
# If the default is not specified the Explicit Handler will be used.
bowstreet.profiles.default.selection.handler=Explicit Handler

# The property for the maximum profile key length before it gets converted to a unique id. The key is then used to generate profiled jsp pages and method classes.
bowstreet.profiles.maxKeyLength=60

################################################################################
# SOAP and other Web Service related properties.
################################################################################

# Is SOAP even enabled?
bowstreet.soap.enabled=true

# Handling of session timeout for in-bound SOAP requests.  An interval less than zero means never expire a
# session.  Zero means invalidate a session immediately (the default).  Positive values specify the time, in
# seconds, between requests before the app server will invalidate a session.  If you define this property it
# will take precedence over a session timeout declared in web.xml or by the app server's admin.  Comment out
# this property to restore the session timeout behavior that existed in WPF 6.1 and earlier.
bowstreet.soap.sessionMaxInactiveInterval=0

# Default targetNamespace for WSDL generated for web service enabled models/actions.
bowstreet.soap.targetModelURIPrefix=http://wpf.ibm.com/2002/03/models/

# SOAP - WSDL Fetch default timeout
bowstreet.soap.wsdl.fetchTimeout=60

# Specify whether to send HTTP Errors (eg, 500 Internal Server Error)
# when returning SOAP Fault Envelopes.  SOAP Spec and WSI currently
# require it, so the default is true, but can be shut off if necessary.
bowstreet.soap.httpErrors=true

# Is the well known WSDL generation action getWSDL enabled?
# Some sites may prefer to disable this on production systems and only leave it enabled for development.
bowstreet.webservice.getWSDL.enabled=true


# DataMapper target URI
# Default is http://bowstreet.com/2002/03/datamapper
#bowstreet.builders.datamapper.namespaceURI=http://bowstreet.com/2002/03/datamapper

# Uncomment these parameters to use cookieless sessions (modification for BEA)
#bowstreet.session.cookieless.enabled=true
#bowstreet.session.cookieless.parameter=IBMSessionID

# Uncomment these parameters to add 1999 and/or 2000/11 XMLSchema References into SOAP responses
#bowstreet.soap.schemaRef.1999=true
#bowstreet.soap.schemaRef.2000=true

# Uncomment this parameter to switch the SOAP Body use attribute to literal, instead of encoded.
#bowstreet.soap.bodyUseLiteral=true

# Uncomment this parameter to disable the addition of the xmlsoap SOAP encoding schema import
# into schemas being parsed. The schema import will reference the SOAPSchemaLocation property.
# Adding the import allows some schemas to parse successfully that might not otherwise.
#bowstreet.schema.noAddSchemaImports=true

# Set this parameter to specify an alternate location for the import of the SOAP encoding schema.
# The default value used in the code is:
#   bowstreet.soap.SOAPSchemaLocation=${bowstreet.rootDirectory}/../schemas/soapencoding.xsd
# and the external internet URL is:
#   bowstreet.soap.SOAPSchemaLocation=http://schemas.xmlsoap.org/soap/encoding/

############################################
# Properties for compiled WebApp methods
############################################
# specifies the compiler to use
bowstreet.methods.compiler=javac
# specifies the compile debug info
bowstreet.methods.debug=-g:source,lines,vars
# specifies the source level compliance for the compiler
bowstreet.methods.sourceLevel=1.5
# This is where the generated source(.java) will go
bowstreet.methods.sourceDirectory=${bowstreet.rootDirectory}/factory/generated
# This is where the compiled class will go. This should be in a place where the dynamic class loader can pick it up.
bowstreet.methods.targetDirectory=${bowstreet.rootDirectory}/work/classes
# This is the Java source template file that will be used to generate the methods class.
bowstreet.methods.sourceTemplate=${bowstreet.rootDirectory}/factory/method_templates/java_method_template.tpl
# This will be used as the method compiler class path, if not specified then the System property "java.class.path" will be used.
# Note - You can specify multiple items by using a comma "," separator. There is no need to change the separator based on target OS.
bowstreet.methods.classPath=${bowstreet.rootDirectory}/clientLibs/j2ee.jar,${bowstreet.rootDirectory}/classes,${bowstreet.rootDirectory}/clientLibs/portlet.jar

# This is used to find all the jar files in the specified directory and add them to the method compiler class path.
# Note - You can specify multiple items by using a comma "," separator. There is no need to change the separator based on target OS.
bowstreet.methods.jarsDir=${bowstreet.rootDirectory}/lib,${bowstreet.rootDirectory}/work/lib

# flag to see if we should remove the model from the users session if the profileset has changed (defaults to false (free on change)).
#bowstreet.engine.disableFreeSessionOnProfileChange=false



############################################
# Character Encoding Properties
############################################

# Non-ASCII characters in URLs will be escaped with *NN (where NN is a hex
# number indicating the character's Unicode value) if this is true.
# NOTE: can increase overall system performance by setting this to false if your
# application uses only ASCII characters for all project, model and action names.
bowstreet.url.special.encoding.enabled=true

# If this is true, each standalone page render request will set a session attribute
# indicating the current character encoding, and each request will check for this
# attribute and, if found, will set the request's character encoding to this value.
# This feature can help with form POST encoding problems.
bowstreet.track.page.encoding=true

# The encoding used to write out JSP files, if the page in question does not specify otherwise.
bowstreet.default.JSP.file.encoding=UTF-8

# If no response encoding is specified, this encoding will be set.
bowstreet.default.JSP.response.encoding=UTF-8

# The next two properties control how Imported Page and other builders decode HTML files that don't have
# explicitly-set character encodings. To get the same behavior as in releases prior to Factory 6, you can
# comment out both properties.

# If "detectEncoding" is true, the code will look for a byte-order mark (BOM) or a <meta> tag to determine the encoding
# if not otherwise specified.  If neither of these are found, or if this property is false, the default encoding (below)
# is used, or the platform default encoding if no default is specified.
# NOTE: if your application does not require encoding detection (e.g., all files use the same encoding) then you may
# get a performance improvement by setting this to false.
bowstreet.imported.html.detectEncoding=true

# This encoding is used when importing HTML without an explicit (or detected) encoding - if this is not set, the platform
# default encoding is used.
bowstreet.imported.html.defaultEncoding=UTF-8

# This encoding is used by the Rich Data Definition builder when reading/writing RDD files
bowstreet.builder.rdd.file.encoding=UTF-8

# This encoding is used when content inserter builders (JavaScript and Stylesheet) read files
bowstreet.builder.contentInserter.file.encoding=UTF-8


###############################################################################################
# SQL Builder Properties
#
# The properties defined below will cause server statistics and SQL statement logging to be
# enabled across all of the SQL builders regardless of the individual builder input settings
# for these features.  Server statistics are enabled by default since they have a minimal
# impact on runtime performance and yield valuable diagnostic information about the runtime
# performance of your SQL access.  By default, SQL statement logging is not be enabled since
# it may generate a large amount of logging content and impact the runtime performance of the
# SQL builders.
###############################################################################################
bowstreet.builder.enableGlobalSqlBuilderServerStatistics=true
bowstreet.builder.enableGlobalSqlBuilderStatementLogging=false


# Property used to specify the project wide Theme file.
# The specified Theme will be available to each model in the project, but can be overridden using the Theme builder.
bowstreet.themeFile=/WEB-INF/factory/themes/blue.uitheme


# This property enables the use of JSR-168/JSR-286 render parameters to maintain portlet navigational state
# The value of this property can be overridden by individual portlets by defining a portlet init parameter using the same name as this property
bowstreet.navigationState.useRenderParameters=false

# Using this property forces all portlets to return the provided mime type for the portlet's response content type
# Under normal operation portlets will use the preferred response content type provided by the portal via PortletRequest.getResponseContentType
# The value of this property can be overridden by individual portlets by defining a portlet init parameter using the same name as this property
#bowstreet.portlet.responseContentType=text/html
